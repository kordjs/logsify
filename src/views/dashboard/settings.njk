{% extends "../layout.njk" %}

{% block content %}
<div class="space-y-6 fade-in">
    <!-- Header -->
    <div class="flex items-center gap-3">
        <div class="w-10 h-10 bg-gradient-to-r from-green-400 to-blue-500 rounded-lg flex items-center justify-center text-white">
            <i class="fas fa-cog text-lg"></i>
        </div>
        <div>
            <h1 class="text-3xl font-bold">Settings</h1>
            <p class="text-sm text-base-content/60">Manage your preferences and API tokens</p>
        </div>
    </div>

    <!-- User Profile Card -->
    <div class="card bg-base-100/80 shadow-xl border border-base-300">
        <div class="card-body">
            <div class="flex items-center gap-4 mb-6">
                <div class="w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-500 rounded-lg flex items-center justify-center text-white">
                    <i class="fas fa-user text-lg"></i>
                </div>
                <h2 class="text-xl font-semibold">Profile Information</h2>
            </div>
            
            <div class="flex items-center gap-6 mb-6">
                <div class="avatar">
                    <div class="w-16 rounded-full ring-4 ring-primary ring-offset-4 ring-offset-base-100">
                        <img src="{{ user.avatar or '/images/default-avatar.png' }}" alt="Profile" />
                    </div>
                </div>
                <div class="flex-1">
                    <h3 class="text-lg font-semibold">{{ user.name }}</h3>
                    <p class="text-base-content/60">@{{ user.username }}</p>
                    <p class="text-sm text-base-content/60">{{ user.email or 'No email provided' }}</p>
                </div>
                <div class="text-right">
                    <div class="stat">
                        <div class="stat-title text-xs">Login Count</div>
                        <div class="stat-value text-sm">{{ user.loginCount or 0 }}</div>
                    </div>
                </div>
            </div>
            
            <div class="text-sm text-base-content/60">
                <p><strong>Last Login:</strong> {{ user.lastLogin.toLocaleString() if user.lastLogin else 'Never' }}</p>
                <p><strong>Member Since:</strong> {{ user.createdAt.toLocaleDateString() if user.createdAt else 'Unknown' }}</p>
            </div>
        </div>
    </div>

    <!-- Preferences Settings -->
    <div class="card bg-base-100/80 shadow-xl border border-base-300">
        <div class="card-body">
            <div class="flex items-center gap-4 mb-6">
                <div class="w-12 h-12 bg-gradient-to-r from-blue-400 to-cyan-500 rounded-lg flex items-center justify-center text-white">
                    <i class="fas fa-sliders-h text-lg"></i>
                </div>
                <h2 class="text-xl font-semibold">Preferences</h2>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Theme Selection -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text font-medium">Theme</span>
                    </label>
                    <select id="themeSelect" class="select select-bordered" onchange="updateThemePreference()">
                        <option value="dark" {{ 'selected' if userPreferences.theme == 'dark' }}>üåô Dark</option>
                        <option value="light" {{ 'selected' if userPreferences.theme == 'light' }}>‚òÄÔ∏è Light</option>
                        <option value="cyberpunk" {{ 'selected' if userPreferences.theme == 'cyberpunk' }}>ü§ñ Cyberpunk</option>
                        <option value="synthwave" {{ 'selected' if userPreferences.theme == 'synthwave' }}>üåà Synthwave</option>
                        <option value="forest" {{ 'selected' if userPreferences.theme == 'forest' }}>üå≤ Forest</option>
                        <option value="aqua" {{ 'selected' if userPreferences.theme == 'aqua' }}>üåä Aqua</option>
                    </select>
                </div>

                <!-- Auto Refresh -->
                <div class="form-control">
                    <label class="label cursor-pointer">
                        <span class="label-text font-medium">Auto-refresh logs</span>
                        <input type="checkbox" id="autoRefreshToggle" class="toggle toggle-primary" 
                               {{ 'checked' if userPreferences.autoRefresh }} onchange="updateAutoRefreshPreference()" />
                    </label>
                    <label class="label">
                        <span class="label-text-alt text-base-content/60">Automatically refresh the logs page every 30 seconds</span>
                    </label>
                </div>

                <!-- Default Log Level -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text font-medium">Default Log Level</span>
                    </label>
                    <select id="logLevelSelect" class="select select-bordered" onchange="updateLogLevelPreference()">
                        <option value="all" {{ 'selected' if userPreferences.defaultLogLevel == 'all' }}>All Levels</option>
                        <option value="debug" {{ 'selected' if userPreferences.defaultLogLevel == 'debug' }}>Debug</option>
                        <option value="info" {{ 'selected' if userPreferences.defaultLogLevel == 'info' }}>Info</option>
                        <option value="warn" {{ 'selected' if userPreferences.defaultLogLevel == 'warn' }}>Warning</option>
                        <option value="error" {{ 'selected' if userPreferences.defaultLogLevel == 'error' }}>Error</option>
                        <option value="fatal" {{ 'selected' if userPreferences.defaultLogLevel == 'fatal' }}>Fatal</option>
                    </select>
                </div>

                <!-- Logs Per Page -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text font-medium">Logs per page</span>
                    </label>
                    <select id="logsPerPageSelect" class="select select-bordered" onchange="updateLogsPerPagePreference()">
                        <option value="25" {{ 'selected' if userPreferences.logsPerPage == 25 }}>25</option>
                        <option value="50" {{ 'selected' if userPreferences.logsPerPage == 50 }}>50</option>
                        <option value="100" {{ 'selected' if userPreferences.logsPerPage == 100 }}>100</option>
                        <option value="200" {{ 'selected' if userPreferences.logsPerPage == 200 }}>200</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- API Tokens Section -->
    <div class="card bg-base-100/80 shadow-xl border border-base-300">
        <div class="card-body">
            <div class="flex items-center justify-between mb-6">
                <div class="flex items-center gap-4">
                    <div class="w-12 h-12 bg-gradient-to-r from-orange-400 to-red-500 rounded-lg flex items-center justify-center text-white">
                        <i class="fas fa-key text-lg"></i>
                    </div>
                    <div>
                        <h2 class="text-xl font-semibold">API Tokens</h2>
                        <p class="text-sm text-base-content/60">Manage your API access tokens</p>
                    </div>
                </div>
                <button class="btn btn-primary gap-2" onclick="showCreateTokenModal()">
                    <i class="fas fa-plus"></i>
                    New Token
                </button>
            </div>

            {% if tokens.length > 0 %}
            <div class="space-y-4">
                {% for token in tokens %}
                <div class="flex items-center justify-between p-4 bg-base-200 rounded-lg border border-base-300">
                    <div class="flex items-center gap-4">
                        <div class="w-8 h-8 bg-gradient-to-r from-green-400 to-blue-500 rounded-lg flex items-center justify-center text-white">
                            <i class="fas fa-key text-sm"></i>
                        </div>
                        <div>
                            <h3 class="font-semibold">{{ token.label }}</h3>
                            <p class="text-sm text-base-content/60">Created {{ token.createdAt.toLocaleDateString() }}</p>
                        </div>
                    </div>
                    <div class="flex items-center gap-2">
                        <span class="badge badge-success">Active</span>
                        <button class="btn btn-error btn-sm" onclick="deleteToken('{{ token._id }}', '{{ token.label }}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                {% endfor %}
            </div>
            {% else %}
            <div class="text-center py-12">
                <div class="w-16 h-16 bg-gradient-to-r from-gray-400 to-gray-600 rounded-full flex items-center justify-center text-white mx-auto mb-4">
                    <i class="fas fa-key text-xl"></i>
                </div>
                <h3 class="text-lg font-semibold mb-2">No API tokens</h3>
                <p class="text-base-content/60 mb-4">Create your first API token to start using the logging API</p>
                <button class="btn btn-primary" onclick="showCreateTokenModal()">Create Token</button>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Create Token Modal -->
    <div id="createTokenModal" class="modal">
        <div class="modal-box">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-lg font-bold">Create API Token</h3>
                <button class="btn btn-sm btn-circle btn-ghost" onclick="hideCreateTokenModal()">‚úï</button>
            </div>
            
            <form id="createTokenForm" class="space-y-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Token Label</span>
                    </label>
                    <input type="text" id="tokenLabel" placeholder="e.g., Production Server" class="input input-bordered" required />
                    <label class="label">
                        <span class="label-text-alt text-base-content/60">Give your token a descriptive name</span>
                    </label>
                </div>
                
                <div class="modal-action">
                    <button type="button" class="btn" onclick="hideCreateTokenModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Token</button>
                </div>
            </form>
        </div>
        <div class="modal-backdrop" onclick="hideCreateTokenModal()"></div>
    </div>

    <!-- Token Created Modal -->
    <div id="tokenCreatedModal" class="modal">
        <div class="modal-box">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-lg font-bold">Token Created Successfully</h3>
                <button class="btn btn-sm btn-circle btn-ghost" onclick="hideTokenCreatedModal()">‚úï</button>
            </div>
            
            <div class="alert alert-warning mb-4">
                <i class="fas fa-exclamation-triangle"></i>
                <span>Save this token now. You won't be able to see it again!</span>
            </div>
            
            <div class="form-control">
                <label class="label">
                    <span class="label-text font-semibold">Your API Token</span>
                </label>
                <div class="flex gap-2">
                    <input type="text" id="newTokenValue" class="input input-bordered flex-1 font-mono text-sm" readonly />
                    <button class="btn btn-secondary" onclick="copyToken()">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
            </div>
            
            <div class="modal-action">
                <button class="btn btn-primary" onclick="hideTokenCreatedModal()">Got it</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Preference update functions
    async function updatePreference(key, value) {
        try {
            const response = await fetch('/api/preferences', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ [key]: value })
            });
            
            if (response.ok) {
                console.log(`${key} preference updated to:`, value);
            }
        } catch (error) {
            console.error('Failed to update preference:', error);
        }
    }

    async function updateThemePreference() {
        const theme = document.getElementById('themeSelect').value;
        setTheme(theme); // Use the global theme function
        await updatePreference('theme', theme);
    }

    async function updateAutoRefreshPreference() {
        const autoRefresh = document.getElementById('autoRefreshToggle').checked;
        await updatePreference('autoRefresh', autoRefresh);
    }

    async function updateLogLevelPreference() {
        const logLevel = document.getElementById('logLevelSelect').value;
        await updatePreference('defaultLogLevel', logLevel);
    }

    async function updateLogsPerPagePreference() {
        const logsPerPage = parseInt(document.getElementById('logsPerPageSelect').value);
        await updatePreference('logsPerPage', logsPerPage);
    }

    // Token management
    function showCreateTokenModal() {
        document.getElementById('createTokenModal').classList.add('modal-open');
        document.getElementById('tokenLabel').focus();
    }

    function hideCreateTokenModal() {
        document.getElementById('createTokenModal').classList.remove('modal-open');
        document.getElementById('createTokenForm').reset();
    }

    function hideTokenCreatedModal() {
        document.getElementById('tokenCreatedModal').classList.remove('modal-open');
        window.location.reload(); // Refresh to show the new token in the list
    }

    async function copyToken() {
        const tokenInput = document.getElementById('newTokenValue');
        try {
            await navigator.clipboard.writeText(tokenInput.value);
            const btn = event.target.closest('button');
            const originalHTML = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-check"></i>';
            btn.classList.add('btn-success');
            btn.classList.remove('btn-secondary');
            
            setTimeout(() => {
                btn.innerHTML = originalHTML;
                btn.classList.remove('btn-success');
                btn.classList.add('btn-secondary');
            }, 2000);
        } catch (err) {
            console.error('Failed to copy token:', err);
        }
    }

    // Create token form handler
    document.getElementById('createTokenForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const label = document.getElementById('tokenLabel').value;
        if (!label.trim()) return;
        
        try {
            const response = await fetch('/api/tokens', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ label: label.trim() })
            });
            
            const data = await response.json();
            
            if (response.ok) {
                // Show the new token
                document.getElementById('newTokenValue').value = data.token;
                hideCreateTokenModal();
                document.getElementById('tokenCreatedModal').classList.add('modal-open');
            } else {
                alert('Failed to create token: ' + (data.error || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error creating token:', error);
            alert('Failed to create token. Please try again.');
        }
    });

    // Delete token function
    async function deleteToken(tokenId, tokenLabel) {
        if (!confirm(`Are you sure you want to delete the token "${tokenLabel}"? This action cannot be undone.`)) {
            return;
        }
        
        try {
            const response = await fetch(`/api/tokens/${tokenId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                window.location.reload();
            } else {
                alert('Failed to delete token. Please try again.');
            }
        } catch (error) {
            console.error('Error deleting token:', error);
            alert('Failed to delete token. Please try again.');
        }
    }
</script>
{% endblock %}