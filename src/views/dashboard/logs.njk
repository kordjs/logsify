{% extends "../layout.njk" %}

{% block content %}
<div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
        <h1 class="text-3xl font-bold">üìä Logs</h1>
        <div class="flex items-center space-x-2">
            <div class="form-control">
                <label class="label cursor-pointer">
                    <span class="label-text mr-2">Auto-refresh</span>
                    <input type="checkbox" id="auto-refresh" class="toggle toggle-primary" />
                </label>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-200 shadow-xl">
        <div class="card-body">
            <h2 class="card-title mb-4">üîç Filters</h2>
            <form method="GET" action="/dashboard/logs" class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <!-- Level Filter -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Level</span>
                    </label>
                    <select name="level" class="select select-bordered">
                        <option value="all" {% if filters.level == 'all' %}selected{% endif %}>All Levels</option>
                        <option value="debug" {% if filters.level == 'debug' %}selected{% endif %}>Debug</option>
                        <option value="info" {% if filters.level == 'info' %}selected{% endif %}>Info</option>
                        <option value="warn" {% if filters.level == 'warn' %}selected{% endif %}>Warn</option>
                        <option value="error" {% if filters.level == 'error' %}selected{% endif %}>Error</option>
                        <option value="fatal" {% if filters.level == 'fatal' %}selected{% endif %}>Fatal</option>
                    </select>
                </div>

                <!-- Namespace Filter -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Namespace</span>
                    </label>
                    <select name="namespace" class="select select-bordered">
                        <option value="all" {% if filters.namespace == 'all' %}selected{% endif %}>All Namespaces</option>
                        {% for ns in namespaces %}
                        <option value="{{ ns }}" {% if filters.namespace == ns %}selected{% endif %}>{{ ns }}</option>
                        {% endfor %}
                    </select>
                </div>

                <!-- Start Date -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Start Date</span>
                    </label>
                    <input type="datetime-local" name="startDate" value="{{ filters.startDate }}" class="input input-bordered" />
                </div>

                <!-- End Date -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">End Date</span>
                    </label>
                    <input type="datetime-local" name="endDate" value="{{ filters.endDate }}" class="input input-bordered" />
                </div>

                <!-- Search -->
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <div class="flex space-x-2">
                        <input type="text" name="search" value="{{ filters.search }}" placeholder="Search logs..." class="input input-bordered flex-1" />
                        <button type="submit" class="btn btn-primary">Filter</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Stats -->
    <div class="stats shadow bg-base-200">
        <div class="stat">
            <div class="stat-title">Total Logs</div>
            <div class="stat-value text-primary">{{ pagination.total }}</div>
            <div class="stat-desc">{{ pagination.pages }} pages</div>
        </div>
        <div class="stat">
            <div class="stat-title">Current Page</div>
            <div class="stat-value">{{ pagination.page }}</div>
            <div class="stat-desc">of {{ pagination.pages }}</div>
        </div>
        <div class="stat">
            <div class="stat-title">Results</div>
            <div class="stat-value">{{ logs.length }}</div>
            <div class="stat-desc">per page</div>
        </div>
    </div>

    <!-- Logs Table -->
    <div class="card bg-base-100 shadow-xl">
        <div class="card-body p-0">
            {% if logs.length > 0 %}
            <!-- Responsive table container with improved scrolling -->
            <div class="overflow-x-auto">
                <div class="min-w-full">
                    <table class="table table-zebra w-full">
                        <thead class="sticky top-0 bg-base-200 z-10">
                            <tr>
                                <th class="min-w-[140px]">Timestamp</th>
                                <th class="min-w-[80px]">Level</th>
                                <th class="min-w-[120px]">Namespace</th>
                                <th class="min-w-[300px]">Message</th>
                                <th class="min-w-[100px]">Metadata</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for log in logs %}
                            <tr class="log-entry hover:bg-base-200/50 transition-colors">
                                <td class="text-sm text-base-content/70 font-mono">
                                    {{ log.timestamp.toLocaleString() }}
                                </td>
                                <td>
                                    <span class="badge badge-sm log-{{ log.level }} font-semibold">
                                        {{ log.level | upper }}
                                    </span>
                                </td>
                                <td>
                                    <span class="badge badge-outline text-xs">{{ log.namespace }}</span>
                                </td>
                                <td class="max-w-[300px]">
                                    <div class="line-clamp-2 text-sm" title="{{ log.message }}">
                                        {{ log.message }}
                                    </div>
                                </td>
                                <td>
                                    {% if log.metadata and (log.metadata | length) > 0 %}
                                    <button 
                                        class="btn btn-xs btn-primary btn-outline"
                                        onclick="openMetadataModal({{ loop.index0 }})"
                                    >
                                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                        View
                                    </button>
                                    {% else %}
                                    <span class="text-base-content/50 text-xs">None</span>
                                    {% endif %}
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            {% else %}
            <div class="text-center py-12">
                <div class="text-6xl mb-4">üì≠</div>
                <h3 class="text-2xl font-bold mb-2">No logs found</h3>
                <p class="text-base-content/70">Try adjusting your filters or create some log entries using the API.</p>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Metadata Modal -->
    <div id="metadataModal" class="modal">
        <div class="modal-box w-11/12 max-w-4xl max-h-[80vh] overflow-hidden flex flex-col">
            <div class="flex justify-between items-center mb-4">
                <h3 class="font-bold text-lg">üìã Log Metadata</h3>
                <button class="btn btn-sm btn-circle btn-ghost" onclick="closeMetadataModal()">‚úï</button>
            </div>
            
            <!-- Modal content scrollable area -->
            <div class="flex-1 overflow-y-auto">
                <div class="bg-base-200 rounded-lg p-4">
                    <div class="flex justify-between items-center mb-4">
                        <span class="text-sm text-base-content/70">Metadata Details</span>
                        <button 
                            class="btn btn-xs btn-secondary" 
                            onclick="copyMetadata()"
                            id="copyMetadataBtn"
                        >
                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                            </svg>
                            Copy JSON
                        </button>
                    </div>
                    <pre id="metadataContent" class="text-xs bg-base-300 p-4 rounded border overflow-x-auto whitespace-pre-wrap break-all"></pre>
                </div>
                
                <!-- Additional log details -->
                <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="bg-base-200 rounded-lg p-4">
                        <h4 class="font-semibold mb-2">üìä Log Details</h4>
                        <div class="space-y-2 text-sm">
                            <div class="flex justify-between">
                                <span class="text-base-content/70">Level:</span>
                                <span id="modalLogLevel" class="badge badge-sm"></span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-base-content/70">Namespace:</span>
                                <span id="modalLogNamespace" class="badge badge-outline"></span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-base-content/70">Timestamp:</span>
                                <span id="modalLogTimestamp" class="font-mono text-xs"></span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bg-base-200 rounded-lg p-4">
                        <h4 class="font-semibold mb-2">üí¨ Message</h4>
                        <div class="text-sm">
                            <p id="modalLogMessage" class="break-words"></p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-action mt-4">
                <button class="btn btn-primary" onclick="closeMetadataModal()">Close</button>
            </div>
        </div>
        <div class="modal-backdrop" onclick="closeMetadataModal()"></div>
    </div>

    <!-- Pagination -->
    {% if pagination.pages > 1 %}
    <div class="flex justify-center">
        <div class="join">
            {% if pagination.hasPrev %}
            <a href="?page={{ pagination.page - 1 }}&level={{ filters.level }}&namespace={{ filters.namespace }}&startDate={{ filters.startDate }}&endDate={{ filters.endDate }}&search={{ filters.search }}" class="join-item btn">¬´</a>
            {% endif %}
            
            {% set startPage = [pagination.page - 2, 1] | max %}
            {% set endPage = [pagination.page + 2, pagination.pages] | min %}
            
            {% for page in range(startPage, endPage + 1) %}
            {% if page == pagination.page %}
            <span class="join-item btn btn-active">{{ page }}</span>
            {% else %}
            <a href="?page={{ page }}&level={{ filters.level }}&namespace={{ filters.namespace }}&startDate={{ filters.startDate }}&endDate={{ filters.endDate }}&search={{ filters.search }}" class="join-item btn">{{ page }}</a>
            {% endif %}
            {% endfor %}
            
            {% if pagination.hasNext %}
            <a href="?page={{ pagination.page + 1 }}&level={{ filters.level }}&namespace={{ filters.namespace }}&startDate={{ filters.startDate }}&endDate={{ filters.endDate }}&search={{ filters.search }}" class="join-item btn">¬ª</a>
            {% endif %}
        </div>
    </div>
    {% endif %}
</div>

<script>
    // Store log data for modal display
    const logsData = {{ logs | dump | safe }};
    
    // Open metadata modal
    function openMetadataModal(logIndex) {
        const log = logsData[logIndex];
        if (!log) return;
        
        // Populate modal with log data
        document.getElementById('modalLogLevel').textContent = log.level.toUpperCase();
        document.getElementById('modalLogLevel').className = `badge badge-sm log-${log.level}`;
        
        document.getElementById('modalLogNamespace').textContent = log.namespace;
        document.getElementById('modalLogTimestamp').textContent = new Date(log.timestamp).toLocaleString();
        document.getElementById('modalLogMessage').textContent = log.message;
        
        // Format and display metadata
        const metadataContent = document.getElementById('metadataContent');
        if (log.metadata && Object.keys(log.metadata).length > 0) {
            metadataContent.textContent = JSON.stringify(log.metadata, null, 2);
        } else {
            metadataContent.textContent = '{}';
        }
        
        // Show modal
        document.getElementById('metadataModal').classList.add('modal-open');
    }
    
    // Close metadata modal
    function closeMetadataModal() {
        document.getElementById('metadataModal').classList.remove('modal-open');
    }
    
    // Copy metadata to clipboard
    function copyMetadata() {
        const metadataContent = document.getElementById('metadataContent').textContent;
        navigator.clipboard.writeText(metadataContent).then(() => {
            const btn = document.getElementById('copyMetadataBtn');
            const originalText = btn.innerHTML;
            btn.innerHTML = '<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>Copied!';
            btn.classList.remove('btn-secondary');
            btn.classList.add('btn-success');
            
            setTimeout(() => {
                btn.innerHTML = originalText;
                btn.classList.remove('btn-success');
                btn.classList.add('btn-secondary');
            }, 2000);
        }).catch(err => {
            console.error('Failed to copy: ', err);
            alert('Failed to copy to clipboard');
        });
    }
    
    // Close modal when clicking outside
    document.getElementById('metadataModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeMetadataModal();
        }
    });
    
    // Close modal with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && document.getElementById('metadataModal').classList.contains('modal-open')) {
            closeMetadataModal();
        }
    });
</script>
{% endblock %}